{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"tweepy.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP8IVT75V5klAtryEBt9tfR"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"_Jt708YlyEv-","colab_type":"code","colab":{}},"source":["import tweepy\n","import json\n","token=\"1227637525700890625-TUqQbv8jb1xKUw8sSYZ5LOgBhlsyrL\"\n","token_secret=\"2KWzbY7KYb9cnpb5fWIzNVMNHvSslPzOQdIHLOMrpu1yK\"\n","key=\"YaQGtlUKzGrB4K0YyITl6Usts\"\n","key_secret=\"8EhZRNkEUCG4bQWIgpSeu715VvQ9IRWqTe7XUHr05QiAvz91aB\"\n","\n","autentifica=tweepy.OAuthHandler(key,key_secret)\n","autentifica.set_access_token(token,token_secret)\n","#API es una clase\n","tweepy.API(autentifica) #con esto genero todas las llamadas al APi de twiter\n","\n","api= tweepy.API(autentifica,wait_on_rate_limit=True, wait_on_rate_limit_notify=True ) #si se llegaste a tu informacion limite entonces esperas 15 min hasta tener mas cupo\n","data2=api.trends_available()\n","print (data2)\n","data2['name']\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MEi4UmqdNfze","colab_type":"code","outputId":"8cfbbc66-eb3e-4c9e-87b6-a17398421716","executionInfo":{"status":"error","timestamp":1582559301405,"user_tz":300,"elapsed":1976,"user":{"displayName":"catalina preciado","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCSSZYPi471a2tPRGipBwq9REmAlyXHQVVLy-15=s64","userId":"17690235812653628551"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import tweepy\n","import json\n","token=\"1227637525700890625-TUqQbv8jb1xKUw8sSYZ5LOgBhlsyrL\"\n","token_secret=\"2KWzbY7KYb9cnpb5fWIzNVMNHvSslPzOQdIHLOMrpu1yK\"\n","key=\"YaQGtlUKzGrB4K0YyITl6Usts\"\n","key_secret=\"8EhZRNkEUCG4bQWIgpSeu715VvQ9IRWqTe7XUHr05QiAvz91aB\"\n","\n","autentifica=tweepy.OAuthHandler(key,key_secret)\n","autentifica.set_access_token(token,token_secret)\n","\n","tweepy.API(autentifica) #con esto genero todas las llamadas al APi de twiter\n","\n","api= tweepy.API(autentifica,wait_on_rate_limit=True, wait_on_rate_limit_notify=True ) #si se llegaste a tu informacion limite entonces esperas 15 min hasta tener mas cupo\n","\n","data1=api.me()#metodo para devolver mi informacion\n","#retorna un objeto llamado user \n","print (json.dumps(data1._json, indent=2))# muestra la info de manera manejable y el espacio entre estos\n","# la info destacable(id, followers, twit, friends (quien siges), location, profile link color color de perfil, url imagenes , screen_name(al lado aroa))\n","\n","data2=api.get_user(\"nike\")\n","data3=api.followers(screen_name=\"nike\") #te muestra un arreiglo de users\n","print(len(data3))# datos de 20\n","for i in data3:\n","  print (json.dumps(data3._json, indent=2))\n","\n","#cursor es una clase de tweepy para obtener cualquier cantidad de info sin paqutes\n","for user in tweepy.Cursor(api.friends, screen_name=\"nike\").items(2): #cuantos?\n","  print (json.dumps(user._json, indent=2))\n","\n","#todos los tits que ha hecho un user\n","api._timeline(screen_name=\"nike\", tweet_model=\"extendeded\")#para que no salga recortado el tweet por los caracteres\n"," \n"," #buscar tweets relacionados \n","for tweet in tweepy.Cursor(api.search, q=\"mundial de clubs\",tweet_model=\"extendeded\").items(10):\n","    print (tweet._json[\"full_text\"])#lo maneja como diccionario de py\n","\n","\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["{\n","  \"id\": 1227637525700890625,\n","  \"id_str\": \"1227637525700890625\",\n","  \"name\": \"kt PRECIAD0\",\n","  \"screen_name\": \"preciad0\",\n","  \"location\": \"\",\n","  \"profile_location\": null,\n","  \"description\": \"\",\n","  \"url\": null,\n","  \"entities\": {\n","    \"description\": {\n","      \"urls\": []\n","    }\n","  },\n","  \"protected\": false,\n","  \"followers_count\": 0,\n","  \"friends_count\": 0,\n","  \"listed_count\": 0,\n","  \"created_at\": \"Wed Feb 12 16:56:20 +0000 2020\",\n","  \"favourites_count\": 0,\n","  \"utc_offset\": null,\n","  \"time_zone\": null,\n","  \"geo_enabled\": false,\n","  \"verified\": false,\n","  \"statuses_count\": 0,\n","  \"lang\": null,\n","  \"contributors_enabled\": false,\n","  \"is_translator\": false,\n","  \"is_translation_enabled\": false,\n","  \"profile_background_color\": \"F5F8FA\",\n","  \"profile_background_image_url\": null,\n","  \"profile_background_image_url_https\": null,\n","  \"profile_background_tile\": false,\n","  \"profile_image_url\": \"http://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png\",\n","  \"profile_image_url_https\": \"https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png\",\n","  \"profile_link_color\": \"1DA1F2\",\n","  \"profile_sidebar_border_color\": \"C0DEED\",\n","  \"profile_sidebar_fill_color\": \"DDEEF6\",\n","  \"profile_text_color\": \"333333\",\n","  \"profile_use_background_image\": true,\n","  \"has_extended_profile\": false,\n","  \"default_profile\": true,\n","  \"default_profile_image\": true,\n","  \"following\": false,\n","  \"follow_request_sent\": false,\n","  \"notifications\": false,\n","  \"translator_type\": \"none\",\n","  \"suspended\": false,\n","  \"needs_phone_verification\": false\n","}\n","20\n"],"name":"stdout"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-115ba6c1316c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m# datos de 20\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m   \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_json\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;31m#cursor es una clase de tweepy para obtener cualquier cantidad de info sin paqutes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'ResultSet' object has no attribute '_json'"]}]},{"cell_type":"code","metadata":{"id":"NOPE3sLrSz_p","colab_type":"code","colab":{}},"source":["from flask import Flask\n","app= Flask(name)\n","app.run "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KBrXsAleWO7x","colab_type":"code","colab":{}},"source":["from sklearn.datasets import load_breast_cancer\n","from sklearn.datasets import load_diabetes\n","from sklearn.metrics import plot_confusion_matrix\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn import svm, datasets\n","#import json\n","from sklearn.model_selection import train_test_split\n","#from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","#hacer 2 metodos de machine y sacar la matriz confusion\n","\n","cancer=load_breast_cancer()\n","diabetes=load_diabetes()\n","x=cancer.data\n","y=cancer.target\n","#type(cancer)\n","#dir(cancer)\n","#concer2=cancer.DESCR #inf general\n","#print (json.dumps(concer2._json, indent=2)) \n","x_train, x_test,y_train,y_test=train_test_split(cancer.data,cancer.target)\n","knn_c = KNeighborsClassifier(n_neighbors=48)\n","knn_c.fit(x_train, y_train) #Ajustamos el método\n","knn_c.score(x_test, y_test) # El porcentaje de acertamiento del método\n","knn_c.predict(x_test)\n","class_names = cancer.target_names\n","\n","classifier = svm.SVC(kernel='linear', C=0.01).fit(x_train, y_train)\n","np.set_printoptions(precision=2)\n","titles_options = [(\"Confusion matrix, without normalization\", None),\n","                  (\"Normalized confusion matrix\", 'true')]\n","for title, normalize in titles_options:\n","    disp = plot_confusion_matrix(classifier, x_test, y_test,\n","                                 display_labels=class_names,\n","                                 cmap=plt.cm.Blues,\n","                                 normalize=normalize)\n","    disp.ax_.set_title(title)\n","\n","    print(title)\n","    print(disp.confusion_matrix)\n","\n","plt.show()\n","\n","x1_train, x1_test,y1_train,y1_test=train_test_split(diabetes.data,diabetes.target)"],"execution_count":0,"outputs":[]}]}